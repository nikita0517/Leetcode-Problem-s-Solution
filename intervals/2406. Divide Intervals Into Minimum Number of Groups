/*We use a min heap to track the rightmost number of each group.

First, we sort the intervals. Then, for each interval, we check if the top of the heap is less than left.

If it is, we can add that interval to an existing group: pop from the heap, and push right, updating the rightmost number of that group.

If not, we need a new group: push right into the heap.

In the end, the size of the heap is the number of groups we need.*/


int minGroups(vector<vector<int>>& ints) {
    sort(begin(ints), end(ints));
    priority_queue<int, vector<int>, greater<int>> pq;
    for (const auto &i : ints) {
        if (!pq.empty() && pq.top() < i[0])
            pq.pop();
        pq.push(i[1]);
    }
    return pq.size();
}
