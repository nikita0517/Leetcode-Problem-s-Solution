/* 
Example 2:

Input: s = "(a)())()"
Output: ["(a())()","(a)()()"]    */

class Solution {
public:
    vector<string>res;
    unordered_set<string>us;
    int invalid(string s){
        stack<char>st;
        for(int i=0;i<s.size();i++){
            if(s[i]=='(')
                st.push('(');
             else if(s[i]==')'){
                if(st.size()==0 )
                    st.push(')');
                else if(st.top()==')')
                    st.push(')');
                else if(st.top()=='(')
                    st.pop();
            }
        }
        return st.size();
    }
    void helper(int tot_rem,string s){
        if(tot_rem<0)return ;
        if(tot_rem==0){
            int ind=invalid(s);
            if(ind==0){
                res.push_back(s);
            }
                return;
            }
            for(int i=0;i<s.size();i++){
            if(s[i]!=')'  && s[i]!='(')
                continue;
            string left=s.substr(0,i);
            string right=s.substr(i+1);
            string temp=left+right;
            if(us.find(temp)==us.end()){
                us.insert(temp);
                helper(tot_rem-1,temp);
        }
        }
        }
    
    vector<string> removeInvalidParentheses(string s) {
        int tot_rem=invalid(s);
        //cout<<tot_rem;
        helper(tot_rem,s);
        return res;
    }
};
